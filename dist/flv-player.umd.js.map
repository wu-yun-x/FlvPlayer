{"version":3,"file":"flv-player.umd.js","sources":["../src/utils/EventEmitter.js","../src/constants.js","../src/core/BasePlayer.js","../src/adapters/MpegtsAdapter.js","../src/core/FlvPlayer.js","../src/index.js"],"sourcesContent":["/*\n * @Author: st004362\n * @Date: 2025-05-28 15:33:40\n * @LastEditors: ST/St004362\n * @LastEditTime: 2025-05-28 16:58:51\n * @Description: 实现事件发射和订阅系统\n */\n\nclass EventEmitter {\n    constructor() {\n        this._events = {};\n    }\n\n    on(event, listener) {\n        // 实现事件注册\n        if (!this._events[event]) {\n            this._events[event] = [];\n        }\n        this._events[event].push(listener);\n        return this;\n    }\n\n    off(event, listener) {\n        // 实现事件取消\n        if (!this._events[event]) return this;\n\n        if (!listener) {\n            // 如果没有提供具体监听器，则删除该事件的所有监听器\n            delete this._events[event];\n            return this;\n        }\n\n        // 找到并删除特定的监听器\n        const index = this._events[event].indexOf(listener);\n        if (index !== -1) {\n            this._events[event].splice(index, 1);\n            // 如果该事件没有监听器了，则删除该事件\n            if (this._events[event].length === 0) {\n                delete this._events[event];\n            }\n        }\n        return this;\n    }\n\n    once(event, listener) {\n        // 实现一次性事件\n        const onceWrapper = (...args) => {\n            // 先移除监听器，再调用原始监听器\n            this.off(event, onceWrapper);\n            listener.apply(this, args);\n        };\n\n        // 保存原始监听器的引用，方便后续可能的移除操作\n        onceWrapper.originalListener = listener;\n\n        return this.on(event, onceWrapper);\n    }\n\n    emit(event, ...args) {\n        // 实现事件触发\n        if (!this._events[event]) return false;\n\n        // 复制一份监听器数组，防止在触发过程中监听器列表被修改导致问题\n        const listeners = [...this._events[event]];\n        listeners.forEach(listener => {\n            try {\n                listener.apply(this, args);\n            } catch (error) {\n                console.error(`Error in event listener for ${event}:`, error);\n            }\n        });\n\n        return true;\n    }\n}\n\nexport default EventEmitter;","/*\n * @Author: st004362\n * @Date: 2025-05-28 17:20:15\n * @LastEditors: ST/St004362\n * @LastEditTime: 2025-05-29 17:59:08\n * @Description: 定义播放器常量\n */\n\n/**\n * 播放器状态常量\n */\nexport const PLAYER_STATES = {\n    // 初始状态，播放器刚创建\n    IDLE: 'idle',\n    // 初始化完成\n    INITIALIZED: 'initialized',\n    // 正在加载资源\n    LOADING: 'loading',\n    // 资源已加载，准备就绪可以播放\n    READY: 'ready',\n    // 正在播放\n    PLAYING: 'playing',\n    // 已暂停\n    PAUSED: 'paused',\n    // 播放结束\n    ENDED: 'ended',\n    // 发生错误\n    ERROR: 'error',\n    // 正在销毁\n    DESTROYING: 'destroying',\n    // 已销毁\n    DESTROYED: 'destroyed',\n    // 正在缓冲\n    BUFFERING: 'buffering'\n};\n\n/**\n * 播放器事件常量\n */\nexport const PLAYER_EVENTS = {\n    // 播放器初始化完成\n    INITIALIZED: 'initialized',\n    // 播放器状态变化\n    STATE_CHANGE: 'stateChange',\n    // 开始加载资源\n    LOADING: 'loading',\n    // 资源加载完成，准备就绪\n    READY: 'ready',\n    // 开始播放\n    PLAY: 'play',\n    // 暂停播放\n    PAUSE: 'pause',\n    // 播放结束\n    ENDED: 'ended',\n    // 发生错误\n    ERROR: 'error',\n    // 时间更新\n    TIME_UPDATE: 'timeUpdate',\n    // 进度更新\n    PROGRESS: 'progress',\n    // 音量变化\n    VOLUME_CHANGE: 'volumeChange',\n    // 静音\n    MUTE: 'mute',\n    // 取消静音\n    UNMUTE: 'unmute',\n    // 开始跳转\n    SEEKING: 'seeking',\n    // 跳转完成\n    SEEKED: 'seeked',\n    // 正在缓冲\n    WAITING: 'waiting',\n    // 可以播放\n    CAN_PLAY: 'canPlay',\n    // 可以流畅播放\n    CAN_PLAY_THROUGH: 'canPlayThrough',\n    // 视频尺寸变化\n    RESIZE: 'resize',\n    // 全屏变化\n    FULLSCREEN_CHANGE: 'fullscreenChange',\n    // 画中画变化\n    PIP_CHANGE: 'pipChange',\n    // 播放速率变化\n    RATE_CHANGE: 'rateChange',\n    // 字幕变化\n    TEXT_TRACK_CHANGE: 'textTrackChange',\n    // 画质变化\n    QUALITY_CHANGE: 'qualityChange',\n    // 统计信息更新\n    STATS_UPDATE: 'statsUpdate',\n    // 销毁\n    DESTROY: 'destroy'\n};\n\n/**\n * 错误类型常量\n */\nexport const ERROR_TYPES = {\n    // 网络错误\n    NETWORK_ERROR: 'networkError',\n    // 媒体错误\n    MEDIA_ERROR: 'mediaError',\n    // 解码错误\n    DECODE_ERROR: 'decodeError',\n    // 格式不支持\n    NOT_SUPPORTED: 'notSupported',\n    // 超时\n    TIMEOUT: 'timeout',\n    // 权限错误\n    PERMISSION_ERROR: 'permissionError',\n    // 初始化错误\n    INIT_ERROR: 'initError',\n    // 加载错误\n    LOAD_ERROR: 'loadError',\n    // 未知错误\n    UNKNOWN: 'unknown'\n};\n\n/**\n * 媒体类型常量\n */\nexport const MEDIA_TYPES = {\n    // FLV格式\n    FLV: 'flv',\n    // HLS格式\n    HLS: 'hls',\n    // DASH格式\n    DASH: 'dash',\n    // MP4格式\n    MP4: 'mp4',\n    // 原生HTML5支持的格式\n    NATIVE: 'native'\n};\n\n/**\n * 日志级别常量\n */\nexport const LOG_LEVELS = {\n    DEBUG: 'debug',\n    INFO: 'info',\n    WARN: 'warn',\n    ERROR: 'error'\n};\n\n/**\n * 适配器类型常量\n */\nexport const ADAPTER_TYPES = {\n    MPEGTS: 'mpegts',\n    FLVJS: 'flvjs',\n    HLSJS: 'hlsjs',\n    DASHJS: 'dashjs',\n    NATIVE: 'native'\n};\n\n/**\n * 播放模式常量\n */\nexport const PLAY_MODES = {\n    // 直播模式\n    LIVE: 'live',\n    // 点播模式\n    VOD: 'vod'\n};\n\n/**\n * 连接类型常量\n */\nexport const CONNECTION_TYPES = {\n    // WebSocket连接\n    WEBSOCKET: 'websocket',\n    // HTTP连接\n    HTTP: 'http',\n    // HTTPS连接\n    HTTPS: 'https',\n    // 本地文件\n    LOCAL: 'local'\n};\n\n/**\n * UI组件类型常量\n */\nexport const UI_COMPONENT_TYPES = {\n    // 播放/暂停按钮\n    PLAY_PAUSE: 'playPause',\n    // 进度条\n    PROGRESS: 'progress',\n    // 时间显示\n    TIME_DISPLAY: 'timeDisplay',\n    // 音量控制\n    VOLUME: 'volume',\n    // 全屏按钮\n    FULLSCREEN: 'fullscreen',\n    // 画中画按钮\n    PIP: 'pip',\n    // 设置按钮\n    SETTINGS: 'settings',\n    // 缩略图\n    THUMBNAIL: 'thumbnail'\n};\n\n/**\n * 统计信息类型常量\n */\nexport const STATS_TYPES = {\n    // 视频帧率\n    FPS: 'fps',\n    // 丢帧率\n    DROP_FRAME_RATE: 'dropFrameRate',\n    // 当前码率\n    BITRATE: 'bitrate',\n    // 总加载时间\n    TOTAL_LOAD_TIME: 'totalLoadTime',\n    // 首帧加载时间\n    FIRST_FRAME_TIME: 'firstFrameTime',\n    // 缓冲区长度\n    BUFFER_LENGTH: 'bufferLength'\n};\n\n/**\n * 默认配置常量\n */\nexport const DEFAULT_CONFIG = {\n    // 自动播放\n    autoplay: false,\n    // 静音\n    muted: false,\n    // 是否为直播\n    isLive: false,\n    // 显示控制栏\n    controls: true,\n    // 默认音量\n    volume: 1.0,\n    // 最大错误重试次数\n    maxErrorRetries: 3,\n    // 重试间隔(毫秒)\n    retryInterval: 3000,\n    // 调试模式\n    debug: false,\n    // 默认适配器\n    adapter: ADAPTER_TYPES.MPEGTS,\n    // 播放模式\n    playMode: PLAY_MODES.LIVE,\n    // 缓冲区大小(秒)\n    bufferSize: 0.5,\n    // 低延迟模式\n    lowLatency: true,\n    // UI配置\n    ui: {\n        enabled: true,\n        components: [\n            UI_COMPONENT_TYPES.PLAY_PAUSE,\n            UI_COMPONENT_TYPES.PROGRESS,\n            UI_COMPONENT_TYPES.TIME_DISPLAY,\n            UI_COMPONENT_TYPES.VOLUME,\n            UI_COMPONENT_TYPES.FULLSCREEN\n        ]\n    }\n};\n","/*\n * @Author: st004362\n * @Date: 2025-05-28 15:30:15\n * @LastEditors: ST/St004362\n * @LastEditTime: 2025-05-28 17:56:43\n * @Description: 定义播放器接口和共享功能\n */\n\nimport EventEmitter from '../utils/EventEmitter';\nimport { PLAYER_STATES, PLAYER_EVENTS, ERROR_TYPES, DEFAULT_CONFIG } from '../constants';\n\nclass BasePlayer extends EventEmitter {\n    constructor(options = {}) {\n        super()\n        this.options = this._mergeOptions(options)\n        this.state = PLAYER_STATES.IDLE\n        this.container = null\n        this.videoElement = null\n        this.errorCount = 0\n        this.maxErrorRetries = this.options.maxErrorRetries || DEFAULT_CONFIG.maxErrorRetries\n        this.retryTimer = null\n        this._init()\n    }\n\n    _mergeOptions(options) {\n        // 合并默认选项和用户选项\n        const defaultOptions = {\n            ...DEFAULT_CONFIG,\n            ...options\n        }\n        return { ...defaultOptions }\n    }\n\n    _init() {\n        // 初始化逻辑\n        this._initContainer()\n        this._initVideoElement()\n        this._bindEvents()\n        this.setState(PLAYER_STATES.INITIALIZED)\n        this.emit(PLAYER_EVENTS.INITIALIZED, this)\n\n        if (this.options.url) {\n            this.load(this.options.url)\n        }\n    }\n\n    _initContainer() {\n        // 初始化容器\n        const { container } = this.options\n        if (typeof container === 'string') {\n            this.container = document.querySelector(container)\n        } else if (container instanceof HTMLElement) {\n            this.container = container\n        } else {\n            throw new Error('Container must be a CSS selector string or HTMLElement')\n        }\n\n        if (!this.container) {\n            throw new Error('Container element not found')\n        }\n    }\n\n    _initVideoElement() {\n        // 初始化视频元素\n        this.videoElement = document.createElement('video')\n        this.videoElement.className = 'flv-player-video'\n\n        // 设置视频属性\n        if (this.options.controls) {\n            this.videoElement.controls = true\n        }\n\n        this.videoElement.muted = !!this.options.muted\n        this.videoElement.volume = this.options.volume\n        this.videoElement.style.width = '100%'\n        this.videoElement.style.height = '100%'\n\n        // 禁用右键菜单\n        this.videoElement.oncontextmenu = () => false;\n\n        // 对于直播流，禁用浏览器默认的缓冲行为\n        if (this.options.isLive) {\n            // 尽量减少缓冲\n            this.videoElement.preload = 'none';\n        }\n\n        // 添加到容器\n        this.container.appendChild(this.videoElement)\n    }\n\n    _bindEvents() {\n        // 绑定视频元素事件\n        const events = [\n            'play', 'pause', 'ended', 'timeupdate', 'seeking',\n            'seeked', 'volumechange', 'waiting', 'playing', 'canplay'\n        ]\n\n        events.forEach(eventName => {\n            this.videoElement.addEventListener(eventName, (e) => {\n                this.emit(eventName, e)\n                this._log(`Video event: ${eventName}`)\n            })\n        })\n\n        // 错误处理\n        this.videoElement.addEventListener('error', this._handleError.bind(this))\n    }\n\n    setState(state) {\n        // 状态管理\n        const prevState = this.state\n        this.state = state\n        this.emit(PLAYER_EVENTS.STATE_CHANGE, { prevState, currentState: state })\n        this._log(`State changed from ${prevState} to ${state}`)\n    }\n\n    getState() {\n        return this.state\n    }\n\n    load(url) {\n        // 加载视频URL的基本实现\n        this.options.url = url\n        this.setState(PLAYER_STATES.LOADING)\n        this.emit(PLAYER_EVENTS.LOADING, { url })\n        this._log(`Loading URL: ${url}`)\n        // 具体加载逻辑由子类实现\n    }\n\n    // 抽象方法需要子类实现\n    play() {\n        throw new Error('Method not implemented')\n    }\n\n    pause() {\n        throw new Error('Method not implemented')\n    }\n\n    seek(time) {\n        throw new Error('Method not implemented')\n    }\n\n    setVolume(volume) {\n        if (volume < 0 || volume > 1) {\n            throw new Error('Volume must be between 0 and 1')\n        }\n        this.videoElement.volume = volume\n        this.options.volume = volume\n        this.emit(PLAYER_EVENTS.VOLUME_CHANGE, { volume })\n        this._log(`Volume set to ${volume}`)\n    }\n\n    mute() {\n        this.videoElement.muted = true\n        this.emit(PLAYER_EVENTS.MUTE, {})\n        this._log('Player muted')\n    }\n\n    unmute() {\n        this.videoElement.muted = false\n        this.emit(PLAYER_EVENTS.UNMUTE, {})\n        this._log('Player unmuted')\n    }\n\n    _clearRetryTimer() {\n        if (this.retryTimer) {\n            clearTimeout(this.retryTimer);\n            this.retryTimer = null;\n        }\n    }\n\n    _handleError(error) {\n        // 基本错误处理逻辑\n        this.errorCount++\n        this.setState(PLAYER_STATES.ERROR)\n\n        const errorInfo = {\n            type: ERROR_TYPES.UNKNOWN,\n            message: 'An unknown error occurred',\n            originalError: error,\n            count: this.errorCount\n        }\n\n        if (error && error.target && error.target.error) {\n            const mediaError = error.target.error\n            errorInfo.code = mediaError.code\n            errorInfo.message = mediaError.message\n\n            switch (mediaError.code) {\n                case 1:\n                    errorInfo.type = ERROR_TYPES.MEDIA_ERROR\n                    errorInfo.message = 'Media resource not found'\n                    break\n                case 2:\n                    errorInfo.type = ERROR_TYPES.NETWORK_ERROR\n                    errorInfo.message = 'Network error occurred during playback'\n                    break\n                case 3:\n                    errorInfo.type = ERROR_TYPES.DECODE_ERROR\n                    errorInfo.message = 'Media decoding error'\n                    break\n                case 4:\n                    errorInfo.type = ERROR_TYPES.NOT_SUPPORTED\n                    errorInfo.message = 'Media format not supported'\n                    break\n            }\n        }\n\n        this.emit(PLAYER_EVENTS.ERROR, errorInfo)\n        this._log(`Error: ${errorInfo.message}`, 'error')\n\n        // 自动重试\n        if (this.options.autoReconnect !== false && this.errorCount <= this.maxErrorRetries && this.options.url) {\n            // 清除之前的重试计时器\n            this._clearRetryTimer();\n\n            // 计算退避时间 (指数退避策略)\n            const retryDelay = Math.min(\n                this.options.retryInterval * Math.pow(1.5, this.errorCount - 1),\n                10000 // 最大10秒\n            );\n\n            this._log(`Retrying playback (${this.errorCount}/${this.maxErrorRetries}) in ${retryDelay}ms...`);\n\n            this.retryTimer = setTimeout(() => {\n                if (this.state !== PLAYER_STATES.DESTROYED) {\n                    this.load(this.options.url);\n                }\n            }, retryDelay);\n        }\n    }\n\n    destroy() {\n        // 通用销毁逻辑\n        this.setState(PLAYER_STATES.DESTROYING)\n\n        // 清除重试计时器\n        this._clearRetryTimer();\n\n        // 移除事件监听\n        if (this.videoElement) {\n            const events = [\n                'play', 'pause', 'ended', 'timeupdate', 'seeking',\n                'seeked', 'volumechange', 'waiting', 'playing', 'canplay', 'error'\n            ]\n\n            events.forEach(eventName => {\n                this.videoElement.removeEventListener(eventName, () => { })\n            })\n\n            // 从DOM中移除视频元素\n            if (this.videoElement.parentNode) {\n                this.videoElement.parentNode.removeChild(this.videoElement)\n            }\n\n            this.videoElement = null\n        }\n\n        // 清除所有事件监听器\n        this._events = {}\n\n        this.setState(PLAYER_STATES.DESTROYED)\n        this._log('Player destroyed')\n    }\n\n    _log(message, level = 'info') {\n        if (!this.options.debug) return\n\n        const prefix = '[FlvPlayer]'\n        switch (level) {\n            case 'error':\n                console.error(`${prefix} ${message}`)\n                break\n            case 'warn':\n                console.warn(`${prefix} ${message}`)\n                break\n            case 'info':\n            default:\n                console.log(`${prefix} ${message}`)\n        }\n    }\n}\n\nexport default BasePlayer;","/*\n * @Author: st004362\n * @Date: 2025-05-28 18:05:15\n * @LastEditors: ST/St004362\n * @LastEditTime: 2025-05-29 17:24:08\n * @Description: mpegts.js适配器，用于连接mpegts.js和BasePlayer\n */\n\nimport mpegts from 'mpegts.js';\nimport {\n    PLAYER_EVENTS,\n    ERROR_TYPES,\n    MEDIA_TYPES,\n    CONNECTION_TYPES,\n    PLAY_MODES\n} from '../constants';\n\nclass MpegtsAdapter {\n    constructor(videoElement, options = {}) {\n        // 检查mpegts.js是否可用\n        if (!mpegts || !mpegts.isSupported()) {\n            throw new Error('mpegts.js is not supported in this browser');\n        }\n\n        this.videoElement = videoElement;\n        this.options = options;\n        this.player = null;\n        this.eventHandlers = {};\n        this.mediaInfo = null;\n        this.statisticsInfo = null;\n        this.retryTimes = 0;\n        this.maxRetryTimes = options.maxErrorRetries || 3;\n        this.retryInterval = options.retryInterval || 3000;\n        this.isLive = options.isLive || false;\n        this.currentUrl = '';\n\n        // 添加连接状态管理\n        this.connectionState = {\n            isConnecting: false,\n            isConnected: false,\n            lastConnectTime: 0,\n            reconnectTimer: null\n        };\n\n        // 缓冲区清理定时器\n        this.bufferCleanupTimer = null;\n    }\n\n    /**\n     * 初始化mpegts.js播放器\n     */\n    init() {\n        // 设置mpegts.js日志级别\n        if (this.options.debug) {\n            mpegts.LoggingControl.enableVerbose = true;\n            mpegts.LoggingControl.enableInfo = true;\n            mpegts.LoggingControl.enableDebug = true;\n        } else {\n            mpegts.LoggingControl.enableVerbose = false;\n            mpegts.LoggingControl.enableInfo = false;\n            mpegts.LoggingControl.enableDebug = false;\n        }\n\n        // 获取mpegts.js支持的功能\n        const features = mpegts.getFeatureList();\n\n        // 检查是否支持MSE播放\n        if (!features.mseLivePlayback) {\n            throw new Error('MSE live playback is not supported in this browser');\n        }\n\n        return this;\n    }\n\n    /**\n     * 加载视频流\n     * @param {string} url - 视频流URL\n     * @param {boolean} isLive - 是否为直播流\n     */\n    load(url, isLive = this.isLive) {\n        if (!url) {\n            throw new Error('URL is required');\n        }\n\n        // 防止重复加载相同URL\n        if (this.currentUrl === url && this.player && this.connectionState.isConnected) {\n            console.log('Already connected to this URL, ignoring duplicate load request');\n            return true;\n        }\n\n        // 如果正在连接中，取消当前的连接\n        if (this.connectionState.isConnecting) {\n            this._clearReconnectTimer();\n        }\n\n        // 清理之前的缓冲区清理定时器\n        this._clearBufferCleanupTimer();\n\n        this.currentUrl = url;\n        this.isLive = isLive;\n\n        // 更新连接状态\n        this.connectionState.isConnecting = true;\n        this.connectionState.isConnected = false;\n        this.connectionState.lastConnectTime = Date.now();\n\n        // 销毁之前的播放器实例\n        this.destroy();\n\n        // 解析URL类型\n        const urlType = this._getUrlType(url);\n        const mediaType = this._getMediaType(url);\n\n        // 创建mpegts.js播放器配置\n        const playerConfig = this._createPlayerConfig(url, urlType, mediaType);\n\n        // 创建mpegts.js播放器实例\n        try {\n            this.player = mpegts.createPlayer(playerConfig);\n\n            // 绑定事件\n            this._bindEvents();\n\n            // 附加到视频元素\n            this.player.attachMediaElement(this.videoElement);\n\n            // 加载\n            this.player.load();\n\n            // 如果是直播模式，启动缓冲区定期清理\n            if (this.isLive && this.options.lowLatency) {\n                this._startBufferCleanup();\n            }\n\n            return true;\n        } catch (error) {\n            this.connectionState.isConnecting = false;\n            this._emitError(ERROR_TYPES.INIT_ERROR, 'Failed to create mpegts.js player', error);\n            return false;\n        }\n    }\n\n    /**\n     * 播放视频\n     */\n    play() {\n        if (!this.player) return false;\n\n        const playPromise = this.videoElement.play();\n        if (playPromise !== undefined) {\n            playPromise.catch(error => {\n                // 自动播放被阻止\n                if (error.name === 'NotAllowedError') {\n                    this._emitError(ERROR_TYPES.PERMISSION_ERROR, 'Autoplay was prevented', error);\n                } else {\n                    this._emitError(ERROR_TYPES.MEDIA_ERROR, 'Failed to play video', error);\n                }\n            });\n        }\n\n        return true;\n    }\n\n    /**\n     * 暂停视频\n     */\n    pause() {\n        if (!this.player) return false;\n\n        this.videoElement.pause();\n        return true;\n    }\n\n    /**\n     * 跳转到指定时间\n     * @param {number} time - 跳转时间（秒）\n     */\n    seek(time) {\n        if (!this.player || this.isLive) return false;\n\n        this.player.currentTime = time;\n        return true;\n    }\n\n    /**\n     * 设置音量\n     * @param {number} volume - 音量（0-1）\n     */\n    setVolume(volume) {\n        if (!this.player) return false;\n\n        this.videoElement.volume = Math.max(0, Math.min(1, volume));\n        return true;\n    }\n\n    /**\n     * 获取媒体信息\n     * @returns {Object} 媒体信息\n     */\n    getMediaInfo() {\n        return this.mediaInfo;\n    }\n\n    /**\n     * 获取统计信息\n     * @returns {Object} 统计信息\n     */\n    getStatisticsInfo() {\n        return this.statisticsInfo;\n    }\n\n    /**\n     * 销毁播放器\n     */\n    destroy() {\n        // 清除重连定时器\n        this._clearReconnectTimer();\n\n        // 清除缓冲区清理定时器\n        this._clearBufferCleanupTimer();\n\n        // 重置连接状态\n        this.connectionState.isConnecting = false;\n        this.connectionState.isConnected = false;\n\n        if (this.player) {\n            try {\n                this._unbindEvents();\n                this.player.unload();\n                this.player.detachMediaElement();\n                this.player.destroy();\n                this.player = null;\n                this.mediaInfo = null;\n                this.statisticsInfo = null;\n                this.retryTimes = 0;\n            } catch (error) {\n                console.error('Error while destroying mpegts player:', error);\n            }\n        }\n    }\n\n    /**\n     * 注册事件监听器\n     * @param {string} event - 事件名称\n     * @param {Function} callback - 回调函数\n     */\n    on(event, callback) {\n        if (!this.eventHandlers[event]) {\n            this.eventHandlers[event] = [];\n        }\n        this.eventHandlers[event].push(callback);\n    }\n\n    /**\n     * 移除事件监听器\n     * @param {string} event - 事件名称\n     * @param {Function} callback - 回调函数\n     */\n    off(event, callback) {\n        if (!this.eventHandlers[event]) return;\n\n        if (!callback) {\n            delete this.eventHandlers[event];\n            return;\n        }\n\n        const index = this.eventHandlers[event].indexOf(callback);\n        if (index !== -1) {\n            this.eventHandlers[event].splice(index, 1);\n            if (this.eventHandlers[event].length === 0) {\n                delete this.eventHandlers[event];\n            }\n        }\n    }\n\n    /**\n     * 触发事件\n     * @param {string} event - 事件名称\n     * @param {*} data - 事件数据\n     * @private\n     */\n    _emit(event, data) {\n        if (!this.eventHandlers[event]) return;\n\n        this.eventHandlers[event].forEach(callback => {\n            try {\n                callback(data);\n            } catch (error) {\n                console.error(`Error in event handler for ${event}:`, error);\n            }\n        });\n    }\n\n    /**\n     * 触发错误事件\n     * @param {string} type - 错误类型\n     * @param {string} message - 错误信息\n     * @param {Error} originalError - 原始错误\n     * @private\n     */\n    _emitError(type, message, originalError) {\n        const errorInfo = {\n            type,\n            message,\n            originalError\n        };\n\n        this._emit(PLAYER_EVENTS.ERROR, errorInfo);\n    }\n\n    /**\n     * 绑定mpegts.js事件\n     * @private\n     */\n    _bindEvents() {\n        if (!this.player) return;\n\n        // 存储事件处理函数，以便后续可以正确解绑\n        this._eventHandlers = {};\n\n        // 错误事件\n        this._eventHandlers.error = (errorType, errorDetail) => {\n            let type = ERROR_TYPES.UNKNOWN;\n            let message = 'Unknown error';\n\n            switch (errorType) {\n                case mpegts.ErrorTypes.NETWORK_ERROR:\n                    type = ERROR_TYPES.NETWORK_ERROR;\n                    message = `Network error: ${errorDetail.message || 'unknown'}`;\n                    // 网络错误可以尝试重连\n                    this._tryReconnect();\n                    break;\n                case mpegts.ErrorTypes.MEDIA_ERROR:\n                    type = ERROR_TYPES.MEDIA_ERROR;\n                    message = `Media error: ${errorDetail.message || 'unknown'}`;\n                    break;\n                case mpegts.ErrorTypes.OTHER_ERROR:\n                    if (errorDetail.code === -2) {\n                        type = ERROR_TYPES.DECODE_ERROR;\n                        message = 'Decode error';\n                    } else {\n                        message = `Other error: ${errorDetail.message || 'unknown'}`;\n                    }\n                    break;\n            }\n\n            this._emitError(type, message, { errorType, errorDetail });\n        };\n        this.player.on(mpegts.Events.ERROR, this._eventHandlers.error);\n\n        // 媒体信息事件\n        this._eventHandlers.mediaInfo = (mediaInfo) => {\n            this.mediaInfo = mediaInfo;\n            this.connectionState.isConnecting = false;\n            this.connectionState.isConnected = true;\n            this._emit(PLAYER_EVENTS.READY, { mediaInfo });\n        };\n        this.player.on(mpegts.Events.MEDIA_INFO, this._eventHandlers.mediaInfo);\n\n        // 统计信息事件\n        this._eventHandlers.statisticsInfo = (statisticsInfo) => {\n            this.statisticsInfo = statisticsInfo;\n            this._emit(PLAYER_EVENTS.STATS_UPDATE, { statisticsInfo });\n        };\n        this.player.on(mpegts.Events.STATISTICS_INFO, this._eventHandlers.statisticsInfo);\n\n        // 其他事件\n        const eventMapping = {\n            [mpegts.Events.LOADING_COMPLETE]: PLAYER_EVENTS.READY,\n            [mpegts.Events.RECOVERED_EARLY_EOF]: PLAYER_EVENTS.READY,\n            [mpegts.Events.METADATA_ARRIVED]: 'metadataArrived',\n            [mpegts.Events.SCRIPTDATA_ARRIVED]: 'scriptdataArrived',\n            [mpegts.Events.TIMED_ID3_METADATA_ARRIVED]: 'timedID3MetadataArrived',\n            [mpegts.Events.PES_PRIVATE_DATA_DESCRIPTOR]: 'pesPrivateDataDescriptor',\n            [mpegts.Events.PES_PRIVATE_DATA_ARRIVED]: 'pesPrivateDataArrived',\n            [mpegts.Events.SMPTE2038_METADATA_ARRIVED]: 'smpte2038MetadataArrived'\n        };\n\n        this._eventHandlers.otherEvents = {};\n\n        Object.keys(eventMapping).forEach(mpegtsEvent => {\n            const handler = (data) => {\n                this._emit(eventMapping[mpegtsEvent], data);\n            };\n\n            // 存储处理函数以便后续解绑\n            this._eventHandlers.otherEvents[mpegtsEvent] = handler;\n\n            this.player.on(mpegtsEvent, handler);\n        });\n    }\n\n    /**\n     * 解绑mpegts.js事件\n     * @private\n     */\n    _unbindEvents() {\n        if (!this.player || !this._eventHandlers) return;\n\n        // 解绑主要事件\n        if (this._eventHandlers.error) {\n            this.player.off(mpegts.Events.ERROR, this._eventHandlers.error);\n        }\n\n        if (this._eventHandlers.mediaInfo) {\n            this.player.off(mpegts.Events.MEDIA_INFO, this._eventHandlers.mediaInfo);\n        }\n\n        if (this._eventHandlers.statisticsInfo) {\n            this.player.off(mpegts.Events.STATISTICS_INFO, this._eventHandlers.statisticsInfo);\n        }\n\n        // 解绑其他事件\n        if (this._eventHandlers.otherEvents) {\n            const eventMapping = {\n                [mpegts.Events.LOADING_COMPLETE]: true,\n                [mpegts.Events.RECOVERED_EARLY_EOF]: true,\n                [mpegts.Events.METADATA_ARRIVED]: true,\n                [mpegts.Events.SCRIPTDATA_ARRIVED]: true,\n                [mpegts.Events.TIMED_ID3_METADATA_ARRIVED]: true,\n                [mpegts.Events.PES_PRIVATE_DATA_DESCRIPTOR]: true,\n                [mpegts.Events.PES_PRIVATE_DATA_ARRIVED]: true,\n                [mpegts.Events.SMPTE2038_METADATA_ARRIVED]: true\n            };\n\n            Object.keys(eventMapping).forEach(mpegtsEvent => {\n                const handler = this._eventHandlers.otherEvents[mpegtsEvent];\n                if (handler) {\n                    this.player.off(mpegtsEvent, handler);\n                }\n            });\n        }\n\n        // 清除存储的事件处理函数\n        this._eventHandlers = null;\n    }\n\n    /**\n     * 清除重连定时器\n     * @private\n     */\n    _clearReconnectTimer() {\n        if (this.connectionState.reconnectTimer) {\n            clearTimeout(this.connectionState.reconnectTimer);\n            this.connectionState.reconnectTimer = null;\n        }\n    }\n\n    /**\n     * 尝试重连\n     * @private\n     */\n    _tryReconnect() {\n        // 如果已经达到最大重试次数或没有URL，则不再重试\n        if (this.retryTimes >= this.maxRetryTimes || !this.currentUrl) return;\n\n        // 如果已经在重连中，不要再次触发重连\n        if (this.connectionState.reconnectTimer) return;\n\n        // 防止短时间内多次重连\n        const now = Date.now();\n        const timeSinceLastConnect = now - this.connectionState.lastConnectTime;\n        if (timeSinceLastConnect < 1000) {\n            console.log(`Reconnect too frequent, delaying. Last connect was ${timeSinceLastConnect}ms ago`);\n            this.retryInterval = Math.min(this.retryInterval * 1.5, 10000); // 指数退避，最大10秒\n        }\n\n        this.retryTimes++;\n\n        this._clearReconnectTimer();\n        this.connectionState.reconnectTimer = setTimeout(() => {\n            if (this.player) {\n                this._emit(PLAYER_EVENTS.LOADING, {\n                    url: this.currentUrl,\n                    retryTimes: this.retryTimes\n                });\n\n                console.log(`Reconnecting (${this.retryTimes}/${this.maxRetryTimes}) to ${this.currentUrl}`);\n                this.load(this.currentUrl, this.isLive);\n            }\n        }, this.retryInterval);\n    }\n\n    /**\n     * 获取URL类型\n     * @param {string} url - URL\n     * @returns {string} URL类型\n     * @private\n     */\n    _getUrlType(url) {\n        if (url.startsWith('ws://') || url.startsWith('wss://')) {\n            return CONNECTION_TYPES.WEBSOCKET;\n        } else if (url.startsWith('http://')) {\n            return CONNECTION_TYPES.HTTP;\n        } else if (url.startsWith('https://')) {\n            return CONNECTION_TYPES.HTTPS;\n        } else {\n            return CONNECTION_TYPES.LOCAL;\n        }\n    }\n\n    /**\n     * 获取媒体类型\n     * @param {string} url - URL\n     * @returns {string} 媒体类型\n     * @private\n     */\n    _getMediaType(url) {\n        const extension = url.split('?')[0].split('.').pop().toLowerCase();\n\n        switch (extension) {\n            case 'flv':\n                return MEDIA_TYPES.FLV;\n            case 'm3u8':\n                return MEDIA_TYPES.HLS;\n            case 'mpd':\n                return MEDIA_TYPES.DASH;\n            case 'mp4':\n                return MEDIA_TYPES.MP4;\n            default:\n                // 根据URL中的关键字判断\n                if (url.includes('flv')) {\n                    return MEDIA_TYPES.FLV;\n                } else if (url.includes('m3u8')) {\n                    return MEDIA_TYPES.HLS;\n                } else if (url.includes('mpd')) {\n                    return MEDIA_TYPES.DASH;\n                } else if (url.includes('mp4')) {\n                    return MEDIA_TYPES.MP4;\n                } else {\n                    // 默认为FLV\n                    return MEDIA_TYPES.FLV;\n                }\n        }\n    }\n\n    /**\n     * 创建mpegts.js播放器配置\n     * @param {string} url - URL\n     * @param {string} urlType - URL类型\n     * @param {string} mediaType - 媒体类型\n     * @returns {Object} 播放器配置\n     * @private\n     */\n    _createPlayerConfig(url, urlType, mediaType) {\n        const config = {\n            type: mediaType.toLowerCase(),\n            url: url,\n            isLive: this.isLive,\n            cors: true,\n            withCredentials: false,\n            hasAudio: true,\n            hasVideo: true\n        };\n\n        // 根据播放模式设置不同的配置\n        if (this.isLive) {\n            // 直播模式配置 - 优化低延迟\n            config.enableStashBuffer = false;\n            config.stashInitialSize = 32; // 进一步减小初始缓冲区大小\n            config.liveBufferLatencyChasing = true; // 启用延迟追赶\n            config.liveBufferLatencyMaxLatency = 0.8; // 降低最大延迟阈值\n            config.liveBufferLatencyMinRemain = 0.1; // 降低最小剩余时间\n            config.liveSync = true; // 启用直播同步\n            config.lazyLoad = false; // 禁用延迟加载\n            config.fixAudioTimestampGap = true; // 修复音频时间戳间隙\n            config.seekType = 'range'; // 使用range请求而不是完整加载\n            config.rangeLoadZeroStart = false; // 不从头开始加载\n            config.forceKeyFrameOnDiscontinuity = true; // 强制关键帧\n            config.accurateSeek = false; // 禁用精确跳转（直播不需要）\n\n            // 如果指定了低延迟模式\n            if (this.options.lowLatency) {\n                config.liveBufferLatencyMaxLatency = 0.5; // 更低的最大延迟\n                config.liveBufferLatencyMinRemain = 0.05; // 更低的最小剩余时间\n                config.autoCleanupSourceBuffer = true; // 自动清理源缓冲区\n                config.autoCleanupMaxBackwardDuration = 1; // 最大后向清理时长（秒）\n                config.autoCleanupMinBackwardDuration = 0.5; // 最小后向清理时长（秒）\n            }\n        } else {\n            // 点播模式配置\n            config.enableStashBuffer = true;\n            config.stashInitialSize = 1024 * 64; // 64KB\n            config.lazyLoad = true;\n        }\n\n        // 添加用户自定义配置\n        if (this.options.mpegtsConfig) {\n            Object.assign(config, this.options.mpegtsConfig);\n        }\n\n        return config;\n    }\n\n    /**\n     * 清除缓冲区清理定时器\n     * @private\n     */\n    _clearBufferCleanupTimer() {\n        if (this.bufferCleanupTimer) {\n            clearInterval(this.bufferCleanupTimer);\n            this.bufferCleanupTimer = null;\n        }\n    }\n\n    /**\n     * 启动缓冲区定期清理\n     * @private\n     */\n    _startBufferCleanup() {\n        // 清除之前的定时器\n        this._clearBufferCleanupTimer();\n\n        // 每5秒检查一次缓冲区状态\n        this.bufferCleanupTimer = setInterval(() => {\n            if (!this.player || !this.isLive) return;\n\n            try {\n                // 获取当前缓冲区信息\n                const mediaElement = this.videoElement;\n                if (!mediaElement || !mediaElement.buffered || mediaElement.buffered.length === 0) return;\n\n                const currentTime = mediaElement.currentTime;\n                const bufferEnd = mediaElement.buffered.end(mediaElement.buffered.length - 1);\n                const bufferSize = bufferEnd - currentTime;\n\n                // 如果缓冲区过大，则清理旧的缓冲区\n                if (bufferSize > 2.0) { // 如果缓冲超过2秒\n                    if (this.options.debug) {\n                        console.log(`缓冲区过大 (${bufferSize.toFixed(2)}s)，尝试清理...`);\n                    }\n\n                    // 如果播放器支持直接清理缓冲区的方法\n                    if (this.player.cleanupSourceBuffer) {\n                        this.player.cleanupSourceBuffer();\n                    }\n\n                    // 如果延迟太大，尝试追帧\n                    if (bufferSize > 3.0 && this.player.currentTime) {\n                        const jumpTarget = bufferEnd - 1.0; // 跳到缓冲区末尾减1秒的位置\n                        if (this.options.debug) {\n                            console.log(`延迟过大，执行追帧: ${currentTime.toFixed(2)}s -> ${jumpTarget.toFixed(2)}s`);\n                        }\n                        this.player.currentTime = jumpTarget;\n                    }\n                }\n            } catch (error) {\n                console.error('Error during buffer cleanup:', error);\n            }\n        }, 5000); // 每5秒检查一次\n    }\n}\n\nexport default MpegtsAdapter;","/*\n * @Author: st004362\n * @Date: 2025-05-28 18:30:15\n * @LastEditors: ST/St004362\n * @LastEditTime: 2025-05-29 15:03:06\n * @Description: FLV播放器实现，继承BasePlayer并使用MpegtsAdapter\n */\n\nimport BasePlayer from './BasePlayer';\nimport MpegtsAdapter from '../adapters/MpegtsAdapter';\nimport mpegts from 'mpegts.js';\nimport {\n    PLAYER_STATES,\n    PLAYER_EVENTS,\n    ERROR_TYPES,\n    ADAPTER_TYPES,\n    PLAY_MODES\n} from '../constants';\n\nclass FlvPlayer extends BasePlayer {\n    /**\n     * FLV播放器构造函数\n     * @param {Object} options - 播放器配置\n     */\n    constructor(options) {\n        // 设置默认选项\n        const defaultOptions = {\n            lowLatency: true, // 默认启用低延迟模式\n            autoReconnect: true, // 默认启用自动重连\n            maxErrorRetries: 3, // 默认最大重试次数\n            retryInterval: 2000 // 默认重试间隔\n        };\n\n        // 合并选项\n        const mergedOptions = { ...defaultOptions, ...options };\n\n        // 如果是直播模式，强制启用追帧功能\n        if (mergedOptions.isLive || mergedOptions.playMode === 'live') {\n            mergedOptions.liveBufferLatencyChasing = true;\n\n            // 如果启用了低延迟模式，使用更激进的追帧设置\n            if (mergedOptions.lowLatency) {\n                mergedOptions.liveBufferLatencyMaxLatency = 0.5;\n                mergedOptions.liveBufferLatencyMinRemain = 0.05;\n            }\n        }\n\n        super(mergedOptions);\n\n        // 初始化适配器\n        this._initAdapter();\n    }\n\n    /**\n     * 初始化适配器\n     * @private\n     */\n    _initAdapter() {\n        try {\n            // 创建适配器实例\n            this.adapter = new MpegtsAdapter(this.videoElement, this.options);\n\n            // 初始化适配器\n            this.adapter.init();\n\n            // 绑定适配器事件\n            this._bindAdapterEvents();\n\n            this._log('Adapter initialized successfully');\n        } catch (error) {\n            this._handleError({\n                type: ERROR_TYPES.INIT_ERROR,\n                message: 'Failed to initialize adapter',\n                originalError: error\n            });\n        }\n    }\n\n    /**\n     * 绑定适配器事件\n     * @private\n     */\n    _bindAdapterEvents() {\n        // 错误事件\n        this.adapter.on(PLAYER_EVENTS.ERROR, (error) => {\n            this._handleError(error);\n        });\n\n        // 准备就绪事件\n        this.adapter.on(PLAYER_EVENTS.READY, (data) => {\n            this.setState(PLAYER_STATES.READY);\n            this.emit(PLAYER_EVENTS.READY, data);\n        });\n\n        // 统计信息更新事件\n        this.adapter.on(PLAYER_EVENTS.STATS_UPDATE, (data) => {\n            this.emit(PLAYER_EVENTS.STATS_UPDATE, data);\n\n            // 监控并报告延迟情况\n            if (this.options.isLive && data.statisticsInfo && this.options.debug) {\n                const stats = data.statisticsInfo;\n                if (stats.currentSegmentIndex !== undefined && stats.decodedFrames !== undefined) {\n                    this._log(`当前延迟: ${stats.currentTime !== undefined ? stats.currentTime.toFixed(2) : 'N/A'}s, 缓冲: ${stats.videoBuffered !== undefined ? stats.videoBuffered.toFixed(2) : 'N/A'}s`);\n                }\n            }\n        });\n\n        // 加载事件\n        this.adapter.on(PLAYER_EVENTS.LOADING, (data) => {\n            this.setState(PLAYER_STATES.LOADING);\n            this.emit(PLAYER_EVENTS.LOADING, data);\n        });\n\n        // 元数据事件\n        this.adapter.on('metadataArrived', (data) => {\n            this.emit('metadataArrived', data);\n        });\n    }\n\n    /**\n     * 加载视频\n     * @param {string} url - 视频URL\n     * @returns {boolean} - 加载是否成功\n     */\n    load(url) {\n        super.load(url);\n\n        try {\n            const result = this.adapter.load(url, this.options.isLive);\n\n            if (result) {\n                this._log(`Successfully loaded URL: ${url}`);\n\n                // 如果配置了自动播放，则自动开始播放\n                if (this.options.autoplay) {\n                    this.play();\n                }\n\n                return true;\n            } else {\n                this._handleError({\n                    type: ERROR_TYPES.LOAD_ERROR,\n                    message: `Failed to load URL: ${url}`\n                });\n                return false;\n            }\n        } catch (error) {\n            this._handleError({\n                type: ERROR_TYPES.LOAD_ERROR,\n                message: `Exception while loading URL: ${url}`,\n                originalError: error\n            });\n            return false;\n        }\n    }\n\n    /**\n     * 播放视频\n     */\n    play() {\n        if (this.state === PLAYER_STATES.PLAYING) {\n            return;\n        }\n\n        try {\n            const result = this.adapter.play();\n\n            if (result) {\n                this.setState(PLAYER_STATES.PLAYING);\n                this.emit(PLAYER_EVENTS.PLAY);\n                this._log('Started playback');\n            }\n        } catch (error) {\n            this._handleError({\n                type: ERROR_TYPES.MEDIA_ERROR,\n                message: 'Failed to start playback',\n                originalError: error\n            });\n        }\n    }\n\n    /**\n     * 暂停视频\n     */\n    pause() {\n        if (this.state === PLAYER_STATES.PAUSED) {\n            return;\n        }\n\n        try {\n            const result = this.adapter.pause();\n\n            if (result) {\n                this.setState(PLAYER_STATES.PAUSED);\n                this.emit(PLAYER_EVENTS.PAUSE);\n                this._log('Paused playback');\n            }\n        } catch (error) {\n            this._handleError({\n                type: ERROR_TYPES.MEDIA_ERROR,\n                message: 'Failed to pause playback',\n                originalError: error\n            });\n        }\n    }\n\n    /**\n     * 跳转到指定时间\n     * @param {number} time - 跳转时间（秒）\n     */\n    seek(time) {\n        // 检查是否为点播模式\n        const isVod = !this.options.isLive && this.options.playMode !== PLAY_MODES.LIVE;\n\n        if (!isVod) {\n            this._log('Seek is not supported in live mode', 'warn');\n            return;\n        }\n\n        try {\n            // 调试日志\n            if (this.options.debug) {\n                this._log(`Seeking to ${time} seconds`);\n            }\n\n            const result = this.adapter.seek(time);\n\n            if (result) {\n                this.emit(PLAYER_EVENTS.SEEKING, { time });\n                this._log(`Seeking to ${time} seconds`);\n\n                // 触发时间更新事件，确保UI更新\n                setTimeout(() => {\n                    this.emit(PLAYER_EVENTS.TIME_UPDATE, { currentTime: time });\n                }, 50);\n            }\n        } catch (error) {\n            this._handleError({\n                type: ERROR_TYPES.MEDIA_ERROR,\n                message: `Failed to seek to ${time} seconds`,\n                originalError: error\n            });\n        }\n    }\n\n    /**\n     * 设置音量\n     * @param {number} volume - 音量（0-1）\n     */\n    setVolume(volume) {\n        super.setVolume(volume);\n\n        try {\n            this.adapter.setVolume(volume);\n        } catch (error) {\n            this._log(`Error setting volume: ${error.message}`, 'warn');\n        }\n    }\n\n    /**\n     * 获取媒体信息\n     * @returns {Object} 媒体信息\n     */\n    getMediaInfo() {\n        return this.adapter ? this.adapter.getMediaInfo() : null;\n    }\n\n    /**\n     * 获取统计信息\n     * @returns {Object} 统计信息\n     */\n    getStatisticsInfo() {\n        return this.adapter ? this.adapter.getStatisticsInfo() : null;\n    }\n\n    /**\n     * 销毁播放器\n     */\n    destroy() {\n        if (this.adapter) {\n            try {\n                this.adapter.destroy();\n                this.adapter = null;\n            } catch (error) {\n                this._log(`Error destroying adapter: ${error.message}`, 'error');\n            }\n        }\n\n        super.destroy();\n    }\n\n    /**\n     * 检查浏览器是否支持\n     * @returns {boolean} 是否支持\n     */\n    static isSupported() {\n        return mpegts && mpegts.isSupported();\n    }\n}\n\nexport default FlvPlayer;","/*\n * @Author: st004362\n * @Date: 2025-05-28 18:35:15\n * @LastEditors: ST/St004362\n * @LastEditTime: 2025-05-29 17:50:58\n * @Description: FlvPlayer库入口文件\n */\n\nimport FlvPlayer from './core/FlvPlayer';\nimport {\n    PLAYER_STATES,\n    PLAYER_EVENTS,\n    ERROR_TYPES,\n    MEDIA_TYPES,\n    CONNECTION_TYPES,\n    PLAY_MODES,\n    ADAPTER_TYPES,\n    DEFAULT_CONFIG,\n    UI_COMPONENT_TYPES\n} from './constants';\n\n// 导出版本信息\nexport const version = '1.0.0';\n\n// 检查浏览器是否支持\nexport const isSupported = FlvPlayer.isSupported;\n\n// 导出播放器类\nexport { FlvPlayer };\n\n// 导出常量\nexport {\n    PLAYER_STATES,\n    PLAYER_EVENTS,\n    ERROR_TYPES,\n    MEDIA_TYPES,\n    CONNECTION_TYPES,\n    PLAY_MODES,\n    ADAPTER_TYPES,\n    UI_COMPONENT_TYPES\n};\n\n// 导出默认配置\nexport { DEFAULT_CONFIG };\n\n// 默认导出FlvPlayer类\nexport default FlvPlayer;\n"],"names":["EventEmitter","event","listener","index","onceWrapper","args","error","PLAYER_STATES","PLAYER_EVENTS","ERROR_TYPES","MEDIA_TYPES","ADAPTER_TYPES","PLAY_MODES","CONNECTION_TYPES","UI_COMPONENT_TYPES","DEFAULT_CONFIG","BasePlayer","options","container","eventName","e","state","prevState","url","time","volume","errorInfo","mediaError","retryDelay","message","level","prefix","MpegtsAdapter","videoElement","mpegts","isLive","urlType","mediaType","playerConfig","playPromise","callback","data","type","originalError","errorType","errorDetail","mediaInfo","statisticsInfo","eventMapping","mpegtsEvent","handler","timeSinceLastConnect","config","mediaElement","currentTime","bufferEnd","bufferSize","jumpTarget","FlvPlayer","mergedOptions","stats","version","isSupported"],"mappings":"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"}