{"version":3,"file":"flv-player.es.js","sources":["../src/utils/EventEmitter.js","../src/constants.js","../src/core/BasePlayer.js","../src/adapters/MpegtsAdapter.js","../src/core/FlvPlayer.js","../src/index.js"],"sourcesContent":["/*\n * @Author: st004362\n * @Date: 2025-05-28 15:33:40\n * @LastEditors: ST/St004362\n * @LastEditTime: 2025-05-28 16:58:51\n * @Description: 实现事件发射和订阅系统\n */\n\nclass EventEmitter {\n    constructor() {\n        this._events = {};\n    }\n\n    on(event, listener) {\n        // 实现事件注册\n        if (!this._events[event]) {\n            this._events[event] = [];\n        }\n        this._events[event].push(listener);\n        return this;\n    }\n\n    off(event, listener) {\n        // 实现事件取消\n        if (!this._events[event]) return this;\n\n        if (!listener) {\n            // 如果没有提供具体监听器，则删除该事件的所有监听器\n            delete this._events[event];\n            return this;\n        }\n\n        // 找到并删除特定的监听器\n        const index = this._events[event].indexOf(listener);\n        if (index !== -1) {\n            this._events[event].splice(index, 1);\n            // 如果该事件没有监听器了，则删除该事件\n            if (this._events[event].length === 0) {\n                delete this._events[event];\n            }\n        }\n        return this;\n    }\n\n    once(event, listener) {\n        // 实现一次性事件\n        const onceWrapper = (...args) => {\n            // 先移除监听器，再调用原始监听器\n            this.off(event, onceWrapper);\n            listener.apply(this, args);\n        };\n\n        // 保存原始监听器的引用，方便后续可能的移除操作\n        onceWrapper.originalListener = listener;\n\n        return this.on(event, onceWrapper);\n    }\n\n    emit(event, ...args) {\n        // 实现事件触发\n        if (!this._events[event]) return false;\n\n        // 复制一份监听器数组，防止在触发过程中监听器列表被修改导致问题\n        const listeners = [...this._events[event]];\n        listeners.forEach(listener => {\n            try {\n                listener.apply(this, args);\n            } catch (error) {\n                console.error(`Error in event listener for ${event}:`, error);\n            }\n        });\n\n        return true;\n    }\n}\n\nexport default EventEmitter;","/*\n * @Author: st004362\n * @Date: 2025-05-28 17:20:15\n * @LastEditors: ST/St004362\n * @LastEditTime: 2025-05-29 15:53:04\n * @Description: 定义播放器常量\n */\n\n/**\n * 播放器状态常量\n */\nexport const PLAYER_STATES = {\n    // 初始状态，播放器刚创建\n    IDLE: 'idle',\n    // 初始化完成\n    INITIALIZED: 'initialized',\n    // 正在加载资源\n    LOADING: 'loading',\n    // 资源已加载，准备就绪可以播放\n    READY: 'ready',\n    // 正在播放\n    PLAYING: 'playing',\n    // 已暂停\n    PAUSED: 'paused',\n    // 播放结束\n    ENDED: 'ended',\n    // 发生错误\n    ERROR: 'error',\n    // 正在销毁\n    DESTROYING: 'destroying',\n    // 已销毁\n    DESTROYED: 'destroyed',\n    // 正在缓冲\n    BUFFERING: 'buffering'\n};\n\n/**\n * 播放器事件常量\n */\nexport const PLAYER_EVENTS = {\n    // 播放器初始化完成\n    INITIALIZED: 'initialized',\n    // 播放器状态变化\n    STATE_CHANGE: 'stateChange',\n    // 开始加载资源\n    LOADING: 'loading',\n    // 资源加载完成，准备就绪\n    READY: 'ready',\n    // 开始播放\n    PLAY: 'play',\n    // 暂停播放\n    PAUSE: 'pause',\n    // 播放结束\n    ENDED: 'ended',\n    // 发生错误\n    ERROR: 'error',\n    // 时间更新\n    TIME_UPDATE: 'timeUpdate',\n    // 进度更新\n    PROGRESS: 'progress',\n    // 音量变化\n    VOLUME_CHANGE: 'volumeChange',\n    // 静音\n    MUTE: 'mute',\n    // 取消静音\n    UNMUTE: 'unmute',\n    // 开始跳转\n    SEEKING: 'seeking',\n    // 跳转完成\n    SEEKED: 'seeked',\n    // 正在缓冲\n    WAITING: 'waiting',\n    // 可以播放\n    CAN_PLAY: 'canPlay',\n    // 可以流畅播放\n    CAN_PLAY_THROUGH: 'canPlayThrough',\n    // 视频尺寸变化\n    RESIZE: 'resize',\n    // 全屏变化\n    FULLSCREEN_CHANGE: 'fullscreenChange',\n    // 画中画变化\n    PIP_CHANGE: 'pipChange',\n    // 播放速率变化\n    RATE_CHANGE: 'rateChange',\n    // 字幕变化\n    TEXT_TRACK_CHANGE: 'textTrackChange',\n    // 画质变化\n    QUALITY_CHANGE: 'qualityChange',\n    // 统计信息更新\n    STATS_UPDATE: 'statsUpdate',\n    // 销毁\n    DESTROY: 'destroy'\n};\n\n/**\n * 错误类型常量\n */\nexport const ERROR_TYPES = {\n    // 网络错误\n    NETWORK_ERROR: 'networkError',\n    // 媒体错误\n    MEDIA_ERROR: 'mediaError',\n    // 解码错误\n    DECODE_ERROR: 'decodeError',\n    // 格式不支持\n    NOT_SUPPORTED: 'notSupported',\n    // 超时\n    TIMEOUT: 'timeout',\n    // 权限错误\n    PERMISSION_ERROR: 'permissionError',\n    // 初始化错误\n    INIT_ERROR: 'initError',\n    // 加载错误\n    LOAD_ERROR: 'loadError',\n    // 未知错误\n    UNKNOWN: 'unknown'\n};\n\n/**\n * 媒体类型常量\n */\nexport const MEDIA_TYPES = {\n    // FLV格式\n    FLV: 'flv',\n    // HLS格式\n    HLS: 'hls',\n    // DASH格式\n    DASH: 'dash',\n    // MP4格式\n    MP4: 'mp4',\n    // 原生HTML5支持的格式\n    NATIVE: 'native'\n};\n\n/**\n * 日志级别常量\n */\nexport const LOG_LEVELS = {\n    DEBUG: 'debug',\n    INFO: 'info',\n    WARN: 'warn',\n    ERROR: 'error'\n};\n\n/**\n * 适配器类型常量\n */\nexport const ADAPTER_TYPES = {\n    MPEGTS: 'mpegts',\n    FLVJS: 'flvjs',\n    HLSJS: 'hlsjs',\n    DASHJS: 'dashjs',\n    NATIVE: 'native'\n};\n\n/**\n * 播放模式常量\n */\nexport const PLAY_MODES = {\n    // 直播模式\n    LIVE: 'live',\n    // 点播模式\n    VOD: 'vod'\n};\n\n/**\n * 连接类型常量\n */\nexport const CONNECTION_TYPES = {\n    // WebSocket连接\n    WEBSOCKET: 'websocket',\n    // HTTP连接\n    HTTP: 'http',\n    // HTTPS连接\n    HTTPS: 'https',\n    // 本地文件\n    LOCAL: 'local'\n};\n\n/**\n * UI组件类型常量\n */\nexport const UI_COMPONENT_TYPES = {\n    // 播放/暂停按钮\n    PLAY_PAUSE: 'playPause',\n    // 进度条\n    PROGRESS: 'progress',\n    // 时间显示\n    TIME_DISPLAY: 'timeDisplay',\n    // 音量控制\n    VOLUME: 'volume',\n    // 全屏按钮\n    FULLSCREEN: 'fullscreen',\n    // 画中画按钮\n    PIP: 'pip',\n    // 设置按钮\n    SETTINGS: 'settings',\n    // 缩略图\n    THUMBNAIL: 'thumbnail'\n};\n\n/**\n * 统计信息类型常量\n */\nexport const STATS_TYPES = {\n    // 视频帧率\n    FPS: 'fps',\n    // 丢帧率\n    DROP_FRAME_RATE: 'dropFrameRate',\n    // 当前码率\n    BITRATE: 'bitrate',\n    // 总加载时间\n    TOTAL_LOAD_TIME: 'totalLoadTime',\n    // 首帧加载时间\n    FIRST_FRAME_TIME: 'firstFrameTime',\n    // 缓冲区长度\n    BUFFER_LENGTH: 'bufferLength'\n};\n\n/**\n * 默认配置常量\n */\nexport const DEFAULT_CONFIG = {\n    // 自动播放\n    autoplay: false,\n    // 静音\n    muted: false,\n    // 是否为直播\n    isLive: false,\n    // 显示控制栏\n    controls: false,\n    // 默认音量\n    volume: 1.0,\n    // 最大错误重试次数\n    maxErrorRetries: 3,\n    // 重试间隔(毫秒)\n    retryInterval: 3000,\n    // 调试模式\n    debug: false,\n    // 默认适配器\n    adapter: ADAPTER_TYPES.MPEGTS,\n    // 播放模式\n    playMode: PLAY_MODES.LIVE,\n    // 缓冲区大小(秒)\n    bufferSize: 0.5,\n    // 低延迟模式\n    lowLatency: true,\n    // UI配置\n    ui: {\n        enabled: true,\n        components: [\n            UI_COMPONENT_TYPES.PLAY_PAUSE,\n            UI_COMPONENT_TYPES.PROGRESS,\n            UI_COMPONENT_TYPES.TIME_DISPLAY,\n            UI_COMPONENT_TYPES.VOLUME,\n            UI_COMPONENT_TYPES.FULLSCREEN\n        ]\n    }\n};\n","/*\n * @Author: st004362\n * @Date: 2025-05-28 15:30:15\n * @LastEditors: ST/St004362\n * @LastEditTime: 2025-05-28 17:56:43\n * @Description: 定义播放器接口和共享功能\n */\n\nimport EventEmitter from '../utils/EventEmitter';\nimport { PLAYER_STATES, PLAYER_EVENTS, ERROR_TYPES, DEFAULT_CONFIG } from '../constants';\n\nclass BasePlayer extends EventEmitter {\n    constructor(options = {}) {\n        super()\n        this.options = this._mergeOptions(options)\n        this.state = PLAYER_STATES.IDLE\n        this.container = null\n        this.videoElement = null\n        this.errorCount = 0\n        this.maxErrorRetries = this.options.maxErrorRetries || DEFAULT_CONFIG.maxErrorRetries\n        this.retryTimer = null\n        this._init()\n    }\n\n    _mergeOptions(options) {\n        // 合并默认选项和用户选项\n        const defaultOptions = {\n            ...DEFAULT_CONFIG,\n            ...options\n        }\n        return { ...defaultOptions }\n    }\n\n    _init() {\n        // 初始化逻辑\n        this._initContainer()\n        this._initVideoElement()\n        this._bindEvents()\n        this.setState(PLAYER_STATES.INITIALIZED)\n        this.emit(PLAYER_EVENTS.INITIALIZED, this)\n\n        if (this.options.url) {\n            this.load(this.options.url)\n        }\n    }\n\n    _initContainer() {\n        // 初始化容器\n        const { container } = this.options\n        if (typeof container === 'string') {\n            this.container = document.querySelector(container)\n        } else if (container instanceof HTMLElement) {\n            this.container = container\n        } else {\n            throw new Error('Container must be a CSS selector string or HTMLElement')\n        }\n\n        if (!this.container) {\n            throw new Error('Container element not found')\n        }\n    }\n\n    _initVideoElement() {\n        // 初始化视频元素\n        this.videoElement = document.createElement('video')\n        this.videoElement.className = 'flv-player-video'\n\n        // 设置视频属性\n        if (this.options.controls) {\n            this.videoElement.controls = true\n        }\n\n        this.videoElement.muted = !!this.options.muted\n        this.videoElement.volume = this.options.volume\n        this.videoElement.style.width = '100%'\n        this.videoElement.style.height = '100%'\n\n        // 禁用右键菜单\n        this.videoElement.oncontextmenu = () => false;\n\n        // 对于直播流，禁用浏览器默认的缓冲行为\n        if (this.options.isLive) {\n            // 尽量减少缓冲\n            this.videoElement.preload = 'none';\n        }\n\n        // 添加到容器\n        this.container.appendChild(this.videoElement)\n    }\n\n    _bindEvents() {\n        // 绑定视频元素事件\n        const events = [\n            'play', 'pause', 'ended', 'timeupdate', 'seeking',\n            'seeked', 'volumechange', 'waiting', 'playing', 'canplay'\n        ]\n\n        events.forEach(eventName => {\n            this.videoElement.addEventListener(eventName, (e) => {\n                this.emit(eventName, e)\n                this._log(`Video event: ${eventName}`)\n            })\n        })\n\n        // 错误处理\n        this.videoElement.addEventListener('error', this._handleError.bind(this))\n    }\n\n    setState(state) {\n        // 状态管理\n        const prevState = this.state\n        this.state = state\n        this.emit(PLAYER_EVENTS.STATE_CHANGE, { prevState, currentState: state })\n        this._log(`State changed from ${prevState} to ${state}`)\n    }\n\n    getState() {\n        return this.state\n    }\n\n    load(url) {\n        // 加载视频URL的基本实现\n        this.options.url = url\n        this.setState(PLAYER_STATES.LOADING)\n        this.emit(PLAYER_EVENTS.LOADING, { url })\n        this._log(`Loading URL: ${url}`)\n        // 具体加载逻辑由子类实现\n    }\n\n    // 抽象方法需要子类实现\n    play() {\n        throw new Error('Method not implemented')\n    }\n\n    pause() {\n        throw new Error('Method not implemented')\n    }\n\n    seek(time) {\n        throw new Error('Method not implemented')\n    }\n\n    setVolume(volume) {\n        if (volume < 0 || volume > 1) {\n            throw new Error('Volume must be between 0 and 1')\n        }\n        this.videoElement.volume = volume\n        this.options.volume = volume\n        this.emit(PLAYER_EVENTS.VOLUME_CHANGE, { volume })\n        this._log(`Volume set to ${volume}`)\n    }\n\n    mute() {\n        this.videoElement.muted = true\n        this.emit(PLAYER_EVENTS.MUTE, {})\n        this._log('Player muted')\n    }\n\n    unmute() {\n        this.videoElement.muted = false\n        this.emit(PLAYER_EVENTS.UNMUTE, {})\n        this._log('Player unmuted')\n    }\n\n    _clearRetryTimer() {\n        if (this.retryTimer) {\n            clearTimeout(this.retryTimer);\n            this.retryTimer = null;\n        }\n    }\n\n    _handleError(error) {\n        // 基本错误处理逻辑\n        this.errorCount++\n        this.setState(PLAYER_STATES.ERROR)\n\n        const errorInfo = {\n            type: ERROR_TYPES.UNKNOWN,\n            message: 'An unknown error occurred',\n            originalError: error,\n            count: this.errorCount\n        }\n\n        if (error && error.target && error.target.error) {\n            const mediaError = error.target.error\n            errorInfo.code = mediaError.code\n            errorInfo.message = mediaError.message\n\n            switch (mediaError.code) {\n                case 1:\n                    errorInfo.type = ERROR_TYPES.MEDIA_ERROR\n                    errorInfo.message = 'Media resource not found'\n                    break\n                case 2:\n                    errorInfo.type = ERROR_TYPES.NETWORK_ERROR\n                    errorInfo.message = 'Network error occurred during playback'\n                    break\n                case 3:\n                    errorInfo.type = ERROR_TYPES.DECODE_ERROR\n                    errorInfo.message = 'Media decoding error'\n                    break\n                case 4:\n                    errorInfo.type = ERROR_TYPES.NOT_SUPPORTED\n                    errorInfo.message = 'Media format not supported'\n                    break\n            }\n        }\n\n        this.emit(PLAYER_EVENTS.ERROR, errorInfo)\n        this._log(`Error: ${errorInfo.message}`, 'error')\n\n        // 自动重试\n        if (this.options.autoReconnect !== false && this.errorCount <= this.maxErrorRetries && this.options.url) {\n            // 清除之前的重试计时器\n            this._clearRetryTimer();\n\n            // 计算退避时间 (指数退避策略)\n            const retryDelay = Math.min(\n                this.options.retryInterval * Math.pow(1.5, this.errorCount - 1),\n                10000 // 最大10秒\n            );\n\n            this._log(`Retrying playback (${this.errorCount}/${this.maxErrorRetries}) in ${retryDelay}ms...`);\n\n            this.retryTimer = setTimeout(() => {\n                if (this.state !== PLAYER_STATES.DESTROYED) {\n                    this.load(this.options.url);\n                }\n            }, retryDelay);\n        }\n    }\n\n    destroy() {\n        // 通用销毁逻辑\n        this.setState(PLAYER_STATES.DESTROYING)\n\n        // 清除重试计时器\n        this._clearRetryTimer();\n\n        // 移除事件监听\n        if (this.videoElement) {\n            const events = [\n                'play', 'pause', 'ended', 'timeupdate', 'seeking',\n                'seeked', 'volumechange', 'waiting', 'playing', 'canplay', 'error'\n            ]\n\n            events.forEach(eventName => {\n                this.videoElement.removeEventListener(eventName, () => { })\n            })\n\n            // 从DOM中移除视频元素\n            if (this.videoElement.parentNode) {\n                this.videoElement.parentNode.removeChild(this.videoElement)\n            }\n\n            this.videoElement = null\n        }\n\n        // 清除所有事件监听器\n        this._events = {}\n\n        this.setState(PLAYER_STATES.DESTROYED)\n        this._log('Player destroyed')\n    }\n\n    _log(message, level = 'info') {\n        if (!this.options.debug) return\n\n        const prefix = '[FlvPlayer]'\n        switch (level) {\n            case 'error':\n                console.error(`${prefix} ${message}`)\n                break\n            case 'warn':\n                console.warn(`${prefix} ${message}`)\n                break\n            case 'info':\n            default:\n                console.log(`${prefix} ${message}`)\n        }\n    }\n}\n\nexport default BasePlayer;","/*\n * @Author: st004362\n * @Date: 2025-05-28 18:05:15\n * @LastEditors: ST/St004362\n * @LastEditTime: 2025-05-29 17:24:08\n * @Description: mpegts.js适配器，用于连接mpegts.js和BasePlayer\n */\n\nimport mpegts from 'mpegts.js';\nimport {\n    PLAYER_EVENTS,\n    ERROR_TYPES,\n    MEDIA_TYPES,\n    CONNECTION_TYPES,\n    PLAY_MODES\n} from '../constants';\n\nclass MpegtsAdapter {\n    constructor(videoElement, options = {}) {\n        // 检查mpegts.js是否可用\n        if (!mpegts || !mpegts.isSupported()) {\n            throw new Error('mpegts.js is not supported in this browser');\n        }\n\n        this.videoElement = videoElement;\n        this.options = options;\n        this.player = null;\n        this.eventHandlers = {};\n        this.mediaInfo = null;\n        this.statisticsInfo = null;\n        this.retryTimes = 0;\n        this.maxRetryTimes = options.maxErrorRetries || 3;\n        this.retryInterval = options.retryInterval || 3000;\n        this.isLive = options.isLive || false;\n        this.currentUrl = '';\n\n        // 添加连接状态管理\n        this.connectionState = {\n            isConnecting: false,\n            isConnected: false,\n            lastConnectTime: 0,\n            reconnectTimer: null\n        };\n\n        // 缓冲区清理定时器\n        this.bufferCleanupTimer = null;\n    }\n\n    /**\n     * 初始化mpegts.js播放器\n     */\n    init() {\n        // 设置mpegts.js日志级别\n        if (this.options.debug) {\n            mpegts.LoggingControl.enableVerbose = true;\n            mpegts.LoggingControl.enableInfo = true;\n            mpegts.LoggingControl.enableDebug = true;\n        } else {\n            mpegts.LoggingControl.enableVerbose = false;\n            mpegts.LoggingControl.enableInfo = false;\n            mpegts.LoggingControl.enableDebug = false;\n        }\n\n        // 获取mpegts.js支持的功能\n        const features = mpegts.getFeatureList();\n\n        // 检查是否支持MSE播放\n        if (!features.mseLivePlayback) {\n            throw new Error('MSE live playback is not supported in this browser');\n        }\n\n        return this;\n    }\n\n    /**\n     * 加载视频流\n     * @param {string} url - 视频流URL\n     * @param {boolean} isLive - 是否为直播流\n     */\n    load(url, isLive = this.isLive) {\n        if (!url) {\n            throw new Error('URL is required');\n        }\n\n        // 防止重复加载相同URL\n        if (this.currentUrl === url && this.player && this.connectionState.isConnected) {\n            console.log('Already connected to this URL, ignoring duplicate load request');\n            return true;\n        }\n\n        // 如果正在连接中，取消当前的连接\n        if (this.connectionState.isConnecting) {\n            this._clearReconnectTimer();\n        }\n\n        // 清理之前的缓冲区清理定时器\n        this._clearBufferCleanupTimer();\n\n        this.currentUrl = url;\n        this.isLive = isLive;\n\n        // 更新连接状态\n        this.connectionState.isConnecting = true;\n        this.connectionState.isConnected = false;\n        this.connectionState.lastConnectTime = Date.now();\n\n        // 销毁之前的播放器实例\n        this.destroy();\n\n        // 解析URL类型\n        const urlType = this._getUrlType(url);\n        const mediaType = this._getMediaType(url);\n\n        // 创建mpegts.js播放器配置\n        const playerConfig = this._createPlayerConfig(url, urlType, mediaType);\n\n        // 创建mpegts.js播放器实例\n        try {\n            this.player = mpegts.createPlayer(playerConfig);\n\n            // 绑定事件\n            this._bindEvents();\n\n            // 附加到视频元素\n            this.player.attachMediaElement(this.videoElement);\n\n            // 加载\n            this.player.load();\n\n            // 如果是直播模式，启动缓冲区定期清理\n            if (this.isLive && this.options.lowLatency) {\n                this._startBufferCleanup();\n            }\n\n            return true;\n        } catch (error) {\n            this.connectionState.isConnecting = false;\n            this._emitError(ERROR_TYPES.INIT_ERROR, 'Failed to create mpegts.js player', error);\n            return false;\n        }\n    }\n\n    /**\n     * 播放视频\n     */\n    play() {\n        if (!this.player) return false;\n\n        const playPromise = this.videoElement.play();\n        if (playPromise !== undefined) {\n            playPromise.catch(error => {\n                // 自动播放被阻止\n                if (error.name === 'NotAllowedError') {\n                    this._emitError(ERROR_TYPES.PERMISSION_ERROR, 'Autoplay was prevented', error);\n                } else {\n                    this._emitError(ERROR_TYPES.MEDIA_ERROR, 'Failed to play video', error);\n                }\n            });\n        }\n\n        return true;\n    }\n\n    /**\n     * 暂停视频\n     */\n    pause() {\n        if (!this.player) return false;\n\n        this.videoElement.pause();\n        return true;\n    }\n\n    /**\n     * 跳转到指定时间\n     * @param {number} time - 跳转时间（秒）\n     */\n    seek(time) {\n        if (!this.player || this.isLive) return false;\n\n        this.player.currentTime = time;\n        return true;\n    }\n\n    /**\n     * 设置音量\n     * @param {number} volume - 音量（0-1）\n     */\n    setVolume(volume) {\n        if (!this.player) return false;\n\n        this.videoElement.volume = Math.max(0, Math.min(1, volume));\n        return true;\n    }\n\n    /**\n     * 获取媒体信息\n     * @returns {Object} 媒体信息\n     */\n    getMediaInfo() {\n        return this.mediaInfo;\n    }\n\n    /**\n     * 获取统计信息\n     * @returns {Object} 统计信息\n     */\n    getStatisticsInfo() {\n        return this.statisticsInfo;\n    }\n\n    /**\n     * 销毁播放器\n     */\n    destroy() {\n        // 清除重连定时器\n        this._clearReconnectTimer();\n\n        // 清除缓冲区清理定时器\n        this._clearBufferCleanupTimer();\n\n        // 重置连接状态\n        this.connectionState.isConnecting = false;\n        this.connectionState.isConnected = false;\n\n        if (this.player) {\n            try {\n                this._unbindEvents();\n                this.player.unload();\n                this.player.detachMediaElement();\n                this.player.destroy();\n                this.player = null;\n                this.mediaInfo = null;\n                this.statisticsInfo = null;\n                this.retryTimes = 0;\n            } catch (error) {\n                console.error('Error while destroying mpegts player:', error);\n            }\n        }\n    }\n\n    /**\n     * 注册事件监听器\n     * @param {string} event - 事件名称\n     * @param {Function} callback - 回调函数\n     */\n    on(event, callback) {\n        if (!this.eventHandlers[event]) {\n            this.eventHandlers[event] = [];\n        }\n        this.eventHandlers[event].push(callback);\n    }\n\n    /**\n     * 移除事件监听器\n     * @param {string} event - 事件名称\n     * @param {Function} callback - 回调函数\n     */\n    off(event, callback) {\n        if (!this.eventHandlers[event]) return;\n\n        if (!callback) {\n            delete this.eventHandlers[event];\n            return;\n        }\n\n        const index = this.eventHandlers[event].indexOf(callback);\n        if (index !== -1) {\n            this.eventHandlers[event].splice(index, 1);\n            if (this.eventHandlers[event].length === 0) {\n                delete this.eventHandlers[event];\n            }\n        }\n    }\n\n    /**\n     * 触发事件\n     * @param {string} event - 事件名称\n     * @param {*} data - 事件数据\n     * @private\n     */\n    _emit(event, data) {\n        if (!this.eventHandlers[event]) return;\n\n        this.eventHandlers[event].forEach(callback => {\n            try {\n                callback(data);\n            } catch (error) {\n                console.error(`Error in event handler for ${event}:`, error);\n            }\n        });\n    }\n\n    /**\n     * 触发错误事件\n     * @param {string} type - 错误类型\n     * @param {string} message - 错误信息\n     * @param {Error} originalError - 原始错误\n     * @private\n     */\n    _emitError(type, message, originalError) {\n        const errorInfo = {\n            type,\n            message,\n            originalError\n        };\n\n        this._emit(PLAYER_EVENTS.ERROR, errorInfo);\n    }\n\n    /**\n     * 绑定mpegts.js事件\n     * @private\n     */\n    _bindEvents() {\n        if (!this.player) return;\n\n        // 存储事件处理函数，以便后续可以正确解绑\n        this._eventHandlers = {};\n\n        // 错误事件\n        this._eventHandlers.error = (errorType, errorDetail) => {\n            let type = ERROR_TYPES.UNKNOWN;\n            let message = 'Unknown error';\n\n            switch (errorType) {\n                case mpegts.ErrorTypes.NETWORK_ERROR:\n                    type = ERROR_TYPES.NETWORK_ERROR;\n                    message = `Network error: ${errorDetail.message || 'unknown'}`;\n                    // 网络错误可以尝试重连\n                    this._tryReconnect();\n                    break;\n                case mpegts.ErrorTypes.MEDIA_ERROR:\n                    type = ERROR_TYPES.MEDIA_ERROR;\n                    message = `Media error: ${errorDetail.message || 'unknown'}`;\n                    break;\n                case mpegts.ErrorTypes.OTHER_ERROR:\n                    if (errorDetail.code === -2) {\n                        type = ERROR_TYPES.DECODE_ERROR;\n                        message = 'Decode error';\n                    } else {\n                        message = `Other error: ${errorDetail.message || 'unknown'}`;\n                    }\n                    break;\n            }\n\n            this._emitError(type, message, { errorType, errorDetail });\n        };\n        this.player.on(mpegts.Events.ERROR, this._eventHandlers.error);\n\n        // 媒体信息事件\n        this._eventHandlers.mediaInfo = (mediaInfo) => {\n            this.mediaInfo = mediaInfo;\n            this.connectionState.isConnecting = false;\n            this.connectionState.isConnected = true;\n            this._emit(PLAYER_EVENTS.READY, { mediaInfo });\n        };\n        this.player.on(mpegts.Events.MEDIA_INFO, this._eventHandlers.mediaInfo);\n\n        // 统计信息事件\n        this._eventHandlers.statisticsInfo = (statisticsInfo) => {\n            this.statisticsInfo = statisticsInfo;\n            this._emit(PLAYER_EVENTS.STATS_UPDATE, { statisticsInfo });\n        };\n        this.player.on(mpegts.Events.STATISTICS_INFO, this._eventHandlers.statisticsInfo);\n\n        // 其他事件\n        const eventMapping = {\n            [mpegts.Events.LOADING_COMPLETE]: PLAYER_EVENTS.READY,\n            [mpegts.Events.RECOVERED_EARLY_EOF]: PLAYER_EVENTS.READY,\n            [mpegts.Events.METADATA_ARRIVED]: 'metadataArrived',\n            [mpegts.Events.SCRIPTDATA_ARRIVED]: 'scriptdataArrived',\n            [mpegts.Events.TIMED_ID3_METADATA_ARRIVED]: 'timedID3MetadataArrived',\n            [mpegts.Events.PES_PRIVATE_DATA_DESCRIPTOR]: 'pesPrivateDataDescriptor',\n            [mpegts.Events.PES_PRIVATE_DATA_ARRIVED]: 'pesPrivateDataArrived',\n            [mpegts.Events.SMPTE2038_METADATA_ARRIVED]: 'smpte2038MetadataArrived'\n        };\n\n        this._eventHandlers.otherEvents = {};\n\n        Object.keys(eventMapping).forEach(mpegtsEvent => {\n            const handler = (data) => {\n                this._emit(eventMapping[mpegtsEvent], data);\n            };\n\n            // 存储处理函数以便后续解绑\n            this._eventHandlers.otherEvents[mpegtsEvent] = handler;\n\n            this.player.on(mpegtsEvent, handler);\n        });\n    }\n\n    /**\n     * 解绑mpegts.js事件\n     * @private\n     */\n    _unbindEvents() {\n        if (!this.player || !this._eventHandlers) return;\n\n        // 解绑主要事件\n        if (this._eventHandlers.error) {\n            this.player.off(mpegts.Events.ERROR, this._eventHandlers.error);\n        }\n\n        if (this._eventHandlers.mediaInfo) {\n            this.player.off(mpegts.Events.MEDIA_INFO, this._eventHandlers.mediaInfo);\n        }\n\n        if (this._eventHandlers.statisticsInfo) {\n            this.player.off(mpegts.Events.STATISTICS_INFO, this._eventHandlers.statisticsInfo);\n        }\n\n        // 解绑其他事件\n        if (this._eventHandlers.otherEvents) {\n            const eventMapping = {\n                [mpegts.Events.LOADING_COMPLETE]: true,\n                [mpegts.Events.RECOVERED_EARLY_EOF]: true,\n                [mpegts.Events.METADATA_ARRIVED]: true,\n                [mpegts.Events.SCRIPTDATA_ARRIVED]: true,\n                [mpegts.Events.TIMED_ID3_METADATA_ARRIVED]: true,\n                [mpegts.Events.PES_PRIVATE_DATA_DESCRIPTOR]: true,\n                [mpegts.Events.PES_PRIVATE_DATA_ARRIVED]: true,\n                [mpegts.Events.SMPTE2038_METADATA_ARRIVED]: true\n            };\n\n            Object.keys(eventMapping).forEach(mpegtsEvent => {\n                const handler = this._eventHandlers.otherEvents[mpegtsEvent];\n                if (handler) {\n                    this.player.off(mpegtsEvent, handler);\n                }\n            });\n        }\n\n        // 清除存储的事件处理函数\n        this._eventHandlers = null;\n    }\n\n    /**\n     * 清除重连定时器\n     * @private\n     */\n    _clearReconnectTimer() {\n        if (this.connectionState.reconnectTimer) {\n            clearTimeout(this.connectionState.reconnectTimer);\n            this.connectionState.reconnectTimer = null;\n        }\n    }\n\n    /**\n     * 尝试重连\n     * @private\n     */\n    _tryReconnect() {\n        // 如果已经达到最大重试次数或没有URL，则不再重试\n        if (this.retryTimes >= this.maxRetryTimes || !this.currentUrl) return;\n\n        // 如果已经在重连中，不要再次触发重连\n        if (this.connectionState.reconnectTimer) return;\n\n        // 防止短时间内多次重连\n        const now = Date.now();\n        const timeSinceLastConnect = now - this.connectionState.lastConnectTime;\n        if (timeSinceLastConnect < 1000) {\n            console.log(`Reconnect too frequent, delaying. Last connect was ${timeSinceLastConnect}ms ago`);\n            this.retryInterval = Math.min(this.retryInterval * 1.5, 10000); // 指数退避，最大10秒\n        }\n\n        this.retryTimes++;\n\n        this._clearReconnectTimer();\n        this.connectionState.reconnectTimer = setTimeout(() => {\n            if (this.player) {\n                this._emit(PLAYER_EVENTS.LOADING, {\n                    url: this.currentUrl,\n                    retryTimes: this.retryTimes\n                });\n\n                console.log(`Reconnecting (${this.retryTimes}/${this.maxRetryTimes}) to ${this.currentUrl}`);\n                this.load(this.currentUrl, this.isLive);\n            }\n        }, this.retryInterval);\n    }\n\n    /**\n     * 获取URL类型\n     * @param {string} url - URL\n     * @returns {string} URL类型\n     * @private\n     */\n    _getUrlType(url) {\n        if (url.startsWith('ws://') || url.startsWith('wss://')) {\n            return CONNECTION_TYPES.WEBSOCKET;\n        } else if (url.startsWith('http://')) {\n            return CONNECTION_TYPES.HTTP;\n        } else if (url.startsWith('https://')) {\n            return CONNECTION_TYPES.HTTPS;\n        } else {\n            return CONNECTION_TYPES.LOCAL;\n        }\n    }\n\n    /**\n     * 获取媒体类型\n     * @param {string} url - URL\n     * @returns {string} 媒体类型\n     * @private\n     */\n    _getMediaType(url) {\n        const extension = url.split('?')[0].split('.').pop().toLowerCase();\n\n        switch (extension) {\n            case 'flv':\n                return MEDIA_TYPES.FLV;\n            case 'm3u8':\n                return MEDIA_TYPES.HLS;\n            case 'mpd':\n                return MEDIA_TYPES.DASH;\n            case 'mp4':\n                return MEDIA_TYPES.MP4;\n            default:\n                // 根据URL中的关键字判断\n                if (url.includes('flv')) {\n                    return MEDIA_TYPES.FLV;\n                } else if (url.includes('m3u8')) {\n                    return MEDIA_TYPES.HLS;\n                } else if (url.includes('mpd')) {\n                    return MEDIA_TYPES.DASH;\n                } else if (url.includes('mp4')) {\n                    return MEDIA_TYPES.MP4;\n                } else {\n                    // 默认为FLV\n                    return MEDIA_TYPES.FLV;\n                }\n        }\n    }\n\n    /**\n     * 创建mpegts.js播放器配置\n     * @param {string} url - URL\n     * @param {string} urlType - URL类型\n     * @param {string} mediaType - 媒体类型\n     * @returns {Object} 播放器配置\n     * @private\n     */\n    _createPlayerConfig(url, urlType, mediaType) {\n        const config = {\n            type: mediaType.toLowerCase(),\n            url: url,\n            isLive: this.isLive,\n            cors: true,\n            withCredentials: false,\n            hasAudio: true,\n            hasVideo: true\n        };\n\n        // 根据播放模式设置不同的配置\n        if (this.isLive) {\n            // 直播模式配置 - 优化低延迟\n            config.enableStashBuffer = false;\n            config.stashInitialSize = 32; // 进一步减小初始缓冲区大小\n            config.liveBufferLatencyChasing = true; // 启用延迟追赶\n            config.liveBufferLatencyMaxLatency = 0.8; // 降低最大延迟阈值\n            config.liveBufferLatencyMinRemain = 0.1; // 降低最小剩余时间\n            config.liveSync = true; // 启用直播同步\n            config.lazyLoad = false; // 禁用延迟加载\n            config.fixAudioTimestampGap = true; // 修复音频时间戳间隙\n            config.seekType = 'range'; // 使用range请求而不是完整加载\n            config.rangeLoadZeroStart = false; // 不从头开始加载\n            config.forceKeyFrameOnDiscontinuity = true; // 强制关键帧\n            config.accurateSeek = false; // 禁用精确跳转（直播不需要）\n\n            // 如果指定了低延迟模式\n            if (this.options.lowLatency) {\n                config.liveBufferLatencyMaxLatency = 0.5; // 更低的最大延迟\n                config.liveBufferLatencyMinRemain = 0.05; // 更低的最小剩余时间\n                config.autoCleanupSourceBuffer = true; // 自动清理源缓冲区\n                config.autoCleanupMaxBackwardDuration = 1; // 最大后向清理时长（秒）\n                config.autoCleanupMinBackwardDuration = 0.5; // 最小后向清理时长（秒）\n            }\n        } else {\n            // 点播模式配置\n            config.enableStashBuffer = true;\n            config.stashInitialSize = 1024 * 64; // 64KB\n            config.lazyLoad = true;\n        }\n\n        // 添加用户自定义配置\n        if (this.options.mpegtsConfig) {\n            Object.assign(config, this.options.mpegtsConfig);\n        }\n\n        return config;\n    }\n\n    /**\n     * 清除缓冲区清理定时器\n     * @private\n     */\n    _clearBufferCleanupTimer() {\n        if (this.bufferCleanupTimer) {\n            clearInterval(this.bufferCleanupTimer);\n            this.bufferCleanupTimer = null;\n        }\n    }\n\n    /**\n     * 启动缓冲区定期清理\n     * @private\n     */\n    _startBufferCleanup() {\n        // 清除之前的定时器\n        this._clearBufferCleanupTimer();\n\n        // 每5秒检查一次缓冲区状态\n        this.bufferCleanupTimer = setInterval(() => {\n            if (!this.player || !this.isLive) return;\n\n            try {\n                // 获取当前缓冲区信息\n                const mediaElement = this.videoElement;\n                if (!mediaElement || !mediaElement.buffered || mediaElement.buffered.length === 0) return;\n\n                const currentTime = mediaElement.currentTime;\n                const bufferEnd = mediaElement.buffered.end(mediaElement.buffered.length - 1);\n                const bufferSize = bufferEnd - currentTime;\n\n                // 如果缓冲区过大，则清理旧的缓冲区\n                if (bufferSize > 2.0) { // 如果缓冲超过2秒\n                    if (this.options.debug) {\n                        console.log(`缓冲区过大 (${bufferSize.toFixed(2)}s)，尝试清理...`);\n                    }\n\n                    // 如果播放器支持直接清理缓冲区的方法\n                    if (this.player.cleanupSourceBuffer) {\n                        this.player.cleanupSourceBuffer();\n                    }\n\n                    // 如果延迟太大，尝试追帧\n                    if (bufferSize > 3.0 && this.player.currentTime) {\n                        const jumpTarget = bufferEnd - 1.0; // 跳到缓冲区末尾减1秒的位置\n                        if (this.options.debug) {\n                            console.log(`延迟过大，执行追帧: ${currentTime.toFixed(2)}s -> ${jumpTarget.toFixed(2)}s`);\n                        }\n                        this.player.currentTime = jumpTarget;\n                    }\n                }\n            } catch (error) {\n                console.error('Error during buffer cleanup:', error);\n            }\n        }, 5000); // 每5秒检查一次\n    }\n}\n\nexport default MpegtsAdapter;","/*\n * @Author: st004362\n * @Date: 2025-05-28 18:30:15\n * @LastEditors: ST/St004362\n * @LastEditTime: 2025-05-29 15:03:06\n * @Description: FLV播放器实现，继承BasePlayer并使用MpegtsAdapter\n */\n\nimport BasePlayer from './BasePlayer';\nimport MpegtsAdapter from '../adapters/MpegtsAdapter';\nimport mpegts from 'mpegts.js';\nimport {\n    PLAYER_STATES,\n    PLAYER_EVENTS,\n    ERROR_TYPES,\n    ADAPTER_TYPES,\n    PLAY_MODES\n} from '../constants';\n\nclass FlvPlayer extends BasePlayer {\n    /**\n     * FLV播放器构造函数\n     * @param {Object} options - 播放器配置\n     */\n    constructor(options) {\n        // 设置默认选项\n        const defaultOptions = {\n            lowLatency: true, // 默认启用低延迟模式\n            autoReconnect: true, // 默认启用自动重连\n            maxErrorRetries: 3, // 默认最大重试次数\n            retryInterval: 2000 // 默认重试间隔\n        };\n\n        // 合并选项\n        const mergedOptions = { ...defaultOptions, ...options };\n\n        // 如果是直播模式，强制启用追帧功能\n        if (mergedOptions.isLive || mergedOptions.playMode === 'live') {\n            mergedOptions.liveBufferLatencyChasing = true;\n\n            // 如果启用了低延迟模式，使用更激进的追帧设置\n            if (mergedOptions.lowLatency) {\n                mergedOptions.liveBufferLatencyMaxLatency = 0.5;\n                mergedOptions.liveBufferLatencyMinRemain = 0.05;\n            }\n        }\n\n        super(mergedOptions);\n\n        // 初始化适配器\n        this._initAdapter();\n    }\n\n    /**\n     * 初始化适配器\n     * @private\n     */\n    _initAdapter() {\n        try {\n            // 创建适配器实例\n            this.adapter = new MpegtsAdapter(this.videoElement, this.options);\n\n            // 初始化适配器\n            this.adapter.init();\n\n            // 绑定适配器事件\n            this._bindAdapterEvents();\n\n            this._log('Adapter initialized successfully');\n        } catch (error) {\n            this._handleError({\n                type: ERROR_TYPES.INIT_ERROR,\n                message: 'Failed to initialize adapter',\n                originalError: error\n            });\n        }\n    }\n\n    /**\n     * 绑定适配器事件\n     * @private\n     */\n    _bindAdapterEvents() {\n        // 错误事件\n        this.adapter.on(PLAYER_EVENTS.ERROR, (error) => {\n            this._handleError(error);\n        });\n\n        // 准备就绪事件\n        this.adapter.on(PLAYER_EVENTS.READY, (data) => {\n            this.setState(PLAYER_STATES.READY);\n            this.emit(PLAYER_EVENTS.READY, data);\n        });\n\n        // 统计信息更新事件\n        this.adapter.on(PLAYER_EVENTS.STATS_UPDATE, (data) => {\n            this.emit(PLAYER_EVENTS.STATS_UPDATE, data);\n\n            // 监控并报告延迟情况\n            if (this.options.isLive && data.statisticsInfo && this.options.debug) {\n                const stats = data.statisticsInfo;\n                if (stats.currentSegmentIndex !== undefined && stats.decodedFrames !== undefined) {\n                    this._log(`当前延迟: ${stats.currentTime !== undefined ? stats.currentTime.toFixed(2) : 'N/A'}s, 缓冲: ${stats.videoBuffered !== undefined ? stats.videoBuffered.toFixed(2) : 'N/A'}s`);\n                }\n            }\n        });\n\n        // 加载事件\n        this.adapter.on(PLAYER_EVENTS.LOADING, (data) => {\n            this.setState(PLAYER_STATES.LOADING);\n            this.emit(PLAYER_EVENTS.LOADING, data);\n        });\n\n        // 元数据事件\n        this.adapter.on('metadataArrived', (data) => {\n            this.emit('metadataArrived', data);\n        });\n    }\n\n    /**\n     * 加载视频\n     * @param {string} url - 视频URL\n     * @returns {boolean} - 加载是否成功\n     */\n    load(url) {\n        super.load(url);\n\n        try {\n            const result = this.adapter.load(url, this.options.isLive);\n\n            if (result) {\n                this._log(`Successfully loaded URL: ${url}`);\n\n                // 如果配置了自动播放，则自动开始播放\n                if (this.options.autoplay) {\n                    this.play();\n                }\n\n                return true;\n            } else {\n                this._handleError({\n                    type: ERROR_TYPES.LOAD_ERROR,\n                    message: `Failed to load URL: ${url}`\n                });\n                return false;\n            }\n        } catch (error) {\n            this._handleError({\n                type: ERROR_TYPES.LOAD_ERROR,\n                message: `Exception while loading URL: ${url}`,\n                originalError: error\n            });\n            return false;\n        }\n    }\n\n    /**\n     * 播放视频\n     */\n    play() {\n        if (this.state === PLAYER_STATES.PLAYING) {\n            return;\n        }\n\n        try {\n            const result = this.adapter.play();\n\n            if (result) {\n                this.setState(PLAYER_STATES.PLAYING);\n                this.emit(PLAYER_EVENTS.PLAY);\n                this._log('Started playback');\n            }\n        } catch (error) {\n            this._handleError({\n                type: ERROR_TYPES.MEDIA_ERROR,\n                message: 'Failed to start playback',\n                originalError: error\n            });\n        }\n    }\n\n    /**\n     * 暂停视频\n     */\n    pause() {\n        if (this.state === PLAYER_STATES.PAUSED) {\n            return;\n        }\n\n        try {\n            const result = this.adapter.pause();\n\n            if (result) {\n                this.setState(PLAYER_STATES.PAUSED);\n                this.emit(PLAYER_EVENTS.PAUSE);\n                this._log('Paused playback');\n            }\n        } catch (error) {\n            this._handleError({\n                type: ERROR_TYPES.MEDIA_ERROR,\n                message: 'Failed to pause playback',\n                originalError: error\n            });\n        }\n    }\n\n    /**\n     * 跳转到指定时间\n     * @param {number} time - 跳转时间（秒）\n     */\n    seek(time) {\n        if (this.options.isLive) {\n            this._log('Seek is not supported in live mode', 'warn');\n            return;\n        }\n\n        try {\n            const result = this.adapter.seek(time);\n\n            if (result) {\n                this.emit(PLAYER_EVENTS.SEEKING, { time });\n                this._log(`Seeking to ${time} seconds`);\n            }\n        } catch (error) {\n            this._handleError({\n                type: ERROR_TYPES.MEDIA_ERROR,\n                message: `Failed to seek to ${time} seconds`,\n                originalError: error\n            });\n        }\n    }\n\n    /**\n     * 设置音量\n     * @param {number} volume - 音量（0-1）\n     */\n    setVolume(volume) {\n        super.setVolume(volume);\n\n        try {\n            this.adapter.setVolume(volume);\n        } catch (error) {\n            this._log(`Error setting volume: ${error.message}`, 'warn');\n        }\n    }\n\n    /**\n     * 获取媒体信息\n     * @returns {Object} 媒体信息\n     */\n    getMediaInfo() {\n        return this.adapter ? this.adapter.getMediaInfo() : null;\n    }\n\n    /**\n     * 获取统计信息\n     * @returns {Object} 统计信息\n     */\n    getStatisticsInfo() {\n        return this.adapter ? this.adapter.getStatisticsInfo() : null;\n    }\n\n    /**\n     * 销毁播放器\n     */\n    destroy() {\n        if (this.adapter) {\n            try {\n                this.adapter.destroy();\n                this.adapter = null;\n            } catch (error) {\n                this._log(`Error destroying adapter: ${error.message}`, 'error');\n            }\n        }\n\n        super.destroy();\n    }\n\n    /**\n     * 检查浏览器是否支持\n     * @returns {boolean} 是否支持\n     */\n    static isSupported() {\n        return mpegts && mpegts.isSupported();\n    }\n}\n\nexport default FlvPlayer;","/*\n * @Author: st004362\n * @Date: 2025-05-28 18:35:15\n * @LastEditors: ST/St004362\n * @LastEditTime: 2025-05-28 18:35:15\n * @Description: FlvPlayer库入口文件\n */\n\nimport FlvPlayer from './core/FlvPlayer';\nimport {\n    PLAYER_STATES,\n    PLAYER_EVENTS,\n    ERROR_TYPES,\n    MEDIA_TYPES,\n    CONNECTION_TYPES,\n    PLAY_MODES,\n    ADAPTER_TYPES,\n    DEFAULT_CONFIG\n} from './constants';\n\n// 导出版本信息\nexport const version = '1.0.0';\n\n// 检查浏览器是否支持\nexport const isSupported = FlvPlayer.isSupported;\n\n// 导出播放器类\nexport { FlvPlayer };\n\n// 导出常量\nexport {\n    PLAYER_STATES,\n    PLAYER_EVENTS,\n    ERROR_TYPES,\n    MEDIA_TYPES,\n    CONNECTION_TYPES,\n    PLAY_MODES,\n    ADAPTER_TYPES\n};\n\n// 导出默认配置\nexport { DEFAULT_CONFIG };\n\n// 默认导出FlvPlayer类\nexport default FlvPlayer;\n"],"names":["EventEmitter","event","listener","index","onceWrapper","args","error","PLAYER_STATES","PLAYER_EVENTS","ERROR_TYPES","MEDIA_TYPES","ADAPTER_TYPES","PLAY_MODES","CONNECTION_TYPES","UI_COMPONENT_TYPES","DEFAULT_CONFIG","BasePlayer","options","container","eventName","e","state","prevState","url","time","volume","errorInfo","mediaError","retryDelay","message","level","prefix","MpegtsAdapter","videoElement","mpegts","isLive","urlType","mediaType","playerConfig","playPromise","callback","data","type","originalError","errorType","errorDetail","mediaInfo","statisticsInfo","eventMapping","mpegtsEvent","handler","timeSinceLastConnect","config","mediaElement","currentTime","bufferEnd","bufferSize","jumpTarget","FlvPlayer","mergedOptions","stats","version","isSupported"],"mappings":"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"}